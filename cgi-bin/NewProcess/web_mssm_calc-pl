#!/usr/bin/perl -w

require "../RunProcess/print_run_form.pm";

#------------------------------------------------------------
# set variables for the most common path names
#------------------------------------------------------------

$server = $ENV{'SERVER_NAME'};
$dirMAD = $ENV{'MADGRAPH_DATA'};
$dirHTML= "MadGraphData";
$mssmcalc = "$ENV{'MADGRAPH_BASE'}/MG_ME/WebBin/Calculators/MSSMCalc";
$uname = $ENV{REMOTE_USER};
$dirLHf = "$ENV{'MADGRAPH_BASE'}/WWW/htdocs/Calculators/mssm";

#------------------------------------------------------------
# Read the form sent from the web
#------------------------------------------------------------

read (STDIN,$buffer,$ENV{'CONTENT_LENGTH'});
@text=split(/\r\n/,$buffer);

#------------------------------------------------------------
# Parse the form, look for known variables
#------------------------------------------------------------

for($i=0;$i<$#text;$i++){
# Define delimiter by first line
  if($i==0) {$delim=$text[$i];chomp $delim}

# Look for process name and set and create directory
  elsif($text[$i] =~ /name=\"procname\"/){
    $i+=2;$procname=$text[$i];
    if($procname eq "proc_name_here"){$procname = ""}
    else {$procname = "/$procname";}
    $directory = "$dirMAD/$uname$procname";
    if(! (-d  "$dirMAD/$uname")){system(" mkdir $dirMAD/$uname")}
    if(! (-d  "$dirMAD/$uname/Cards")){system(" mkdir $dirMAD/$uname/Cards")}
  }

# Look for uploaded file. Write to file defined by "name" (needs $directory and $delim)
  elsif(($filename,$filegiven)=$text[$i] =~ /name=\"([\d\D]*)?\"; filename=\"([\d\D]*)?\"/){
    $filename=$directory."/Cards/".$filename;
    if($filegiven eq ""){WriteError("You must provide a SUSY Les Houches file");}
    $i+=3;
    open(CICCIO,">$filename") or WriteError("File $filename could not be opened");
    $fileok=0;
    while(!($text[$i] =~ "$delim")){
      $filecont=$text[$i];
      if($filecont ne "") {$fileok=1;}
      print CICCIO "$filecont\n";
      $i++;
    }
    close CICCIO;
    # Check that the resulting file is not empty
    if($fileok == 0) {
      WriteError("File $filegiven empty or absent. Please provide another file");
    }
  }

# Look for all other variables and put them in the hash $invars
  elsif(($variable) = $text[$i] =~
	/Content-Disposition: form-data; name=\"([\d\D]*)?\"/){
    $i+=2;$invars{$variable}=$text[$i];
  }
}

# If running standalone, increment filename

$paramcard = "param_card.dat";
if($procname eq "") {
  $temp_id=1;
  $paramcard = "param_card_$temp_id.dat";
  while (-e "$directory/Cards/$paramcard"){
    $temp_id++;
    $paramcard = "param_card_$temp_id.dat";
  }
}

#------------------------------------------------------------
# Take action depending on value of $callfrom
#------------------------------------------------------------

$callfrom = $invars{"callfrom"};

if($callfrom eq "calculate"){
  Calculate();
}
elsif($callfrom eq "sps"){
  SPS();
}
else {
  WriteError("Server error (wrong callfrom=$callfrom) - please contact system administrator");
}

#------------------------------------------------------------
# Write output to browser, displaying the card
#------------------------------------------------------------

open(CARD,"<$directory/Cards/$paramcard") or
  WriteError("The resulting $directory/Cards/$paramcard could not be opened.");

$| = 1;
if($procname eq "") {
    print "Content-type: text/html\n\n";
    print "<HTML>\n<HEAD> \n";
    print "<TITLE>Param card generation</TITLE></HEAD>\n<BODY>\n";
    print "<H2>Generation complete</H2>\n";
    print "The parameter card has been generated and saved with the name $paramcard.\n";
    print "<BR><a href=\"/MadGraphData/$uname$procname/Cards/$paramcard\">Download</a> the SUSY parameter card for future use/reference.\n";
    print "<BR><hr>\n";
    print "Resulting file $paramcard:\n";
    print "<PRE>\n";
    while(<CARD>){
	print "$_";
    }
    print "</PRE>\n";
}
else{
    $process = $uname."/".$procname;
    $card_complete="param_card generation complete. ";
    $card_complete .= "Please check the new <a href=\"http://$server/$dirHTML/$process/Cards/param_card.dat\">param_card</a>.";

    &PrintRunForm;
    exit;
}
close CARD;
print "</BODY>\n</HTML>\n";
#
#   That's all folks!
#

#------------------------------------------------------------
# Subroutines
#------------------------------------------------------------

sub Calculate {
  $widths=$invars{"widths"};
  $mcalc =$invars{"mcalc"};
  system("cp $mssmcalc $directory/Cards/");
  system("cd $directory/Cards && ./MSSMCalc $widths $mcalc >MSSMCalc.out");
  system("mv $directory/Cards/param_card.dat $directory/Cards/$paramcard");
  system("rm -f $directory/Cards/MSSMCalc");
}

sub SPS {
  $lhfile =$invars{"LHfile"};
  $lhfile = "$dirLHf/$lhfile";
  system("cp $lhfile $directory/Cards/$paramcard");
}

#------------------------------------------------------------
# Display error message in browser and kill process
#------------------------------------------------------------

sub WriteError {
$errormsg=shift;
$| = 1;
print "Content-type: text/html\n\n";
print "<HTML>\n<HEAD> \n";
print "<TITLE>Param card generation</TITLE></HEAD>\n<BODY>\n";
print "<H2>Generation failed</H2>\n";
print "$errormsg";
print "<BR>Click the \"backwards\" button in you browser and correct the error.\n";
print "</BODY>\n</HTML>\n";
die;
}
