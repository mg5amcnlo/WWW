#!/usr/bin/perl -w
#------------------------NOTES-------------------------------
#
# URL REFERENCES:
# when putting in url references listing a file without
# anything in front, like
#   file
# will look for the file in the local directory
#
# giving the reference as
#  /file
# will look in the server/htdocs folder
#
#------------------------------------------------------------
#
#          This is Denny's code for unwrapping the form replies
#
my($zzi,@marked,$qn,$an);
binmode STDIN;
read STDIN,$zzi,$ENV{CONTENT_LENGTH};
$zzi =~ s/\s$//g;
@marked = split(/&/,$zzi);
foreach $input (@marked) {
    ($qn,$an) = split(/=/,$input);
    $an =~ tr/+/ /;
    $an =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
    $an =~ s/~!/ ~!/g;
    $in{$qn} = $an
    }

#-----------------------------------------------------------
# set variables for the most common path names
#------------------------------------------------------------

$dirDATA = $ENV{'MADGRAPH_DATA'};
$dirLOG = $ENV{'MADGRAPH_DATA'};
$dirHTML = "MadGraphData";
$server = $ENV{'SERVER_NAME'};
$mg5_prog =  "python3 -O $ENV{'MADGRAPH_BASE'}/MG5/bin/mg5 --web";

#------------------------------------------
# Find a free directory in the private area
#------------------------------------------

# first check private dir exists and if not create it
$uname = $ENV{REMOTE_USER};
if(! -e "$dirDATA/$uname" ){ 
    system("mkdir $dirDATA/$uname");
};

# If no dirname is given or it already exists then use a generic PROC#
$temp_id=0;
while (-e "$dirDATA/$uname/PROC$temp_id"){
    $temp_id++;
}
$procname="PROC$temp_id";
$process="$uname/PROC$temp_id";
$fulldir="$dirDATA/$process";

#------------------------------------------------------------
# call
#------------------------------------------------------------
$callfrom = $in{callfrom};
#------------------------------------------------------------
# prepare the directory
#------------------------------------------------------------

if (! -e "$ENV{'MADGRAPH_BASE'}/MG5/Template"){ PrintError("No MG5/Template directory found"); }
system("mkdir $dirDATA/$process");
system("cp $ENV{'MADGRAPH_BASE'}/MG5/Template/LO/index.html $dirDATA/$process");

if($callfrom eq 'form'){
#------------------------------------------------------------
# read in the values passed from the form
#------------------------------------------------------------
    $interaction = $in{description};
#    $interaction_1 = $in{add_1}
#    $interaction_2 = $in{add_2}
#    $interaction_3 = $in{add_3}
#    $interaction_4 = $in{add_4}
    $name = 'proc_card_mg5.dat';
    $model = $in{model};
    $nf    = $in{nf};
    $nl    = $in{nl};
    #$program = $in{program};
    #$processformat = $in{stringformat};
    if (index($interaction, ">") < 0){
	&PrintError("No valid process specified");
    }

#------------------------------------------------------------------
# write contents to input.dat file which will be used to run madgraph
#------------------------------------------------------------------
    &WriteCmdCard($interaction, $model, $nf, $nl, $process, 'madevent');
}
elsif($callfrom eq 'upload' || $callfrom eq 'upload_banner'){
#------------------------------------------------------------
# the proc_card.dat is already available in the directory now
#------------------------------------------------------------
    if($callfrom eq 'upload_banner'){
#------------------------------------------------------------
# the proc_card.dat is already available in the directory now
#------------------------------------------------------------
# select run mode
	    if (-e "$dirDATA/$uname/proc_card_mg5.dat"){
	        $program = "mg5_full";
	    }
	    else{
	        $program = "mg4";
	    }
    }
    else{
# extract the model name and process:
	$program = $in{program};
    }
    if( $program eq "mg5_full"){
	    $name = 'proc_card_mg5.dat';
	    system("rm -f $fulldir/proc_card.dat");
	    open (INPUT, "$dirDATA/$uname/$name");
	    @input=<INPUT>;
	    close(INPUT);
	    $model='none';
	    $interaction='unknown';
	    $found=0;
	    $foundproc=0;
	    foreach $i (@input){
	        if($i =~ '^import model ([\w\d_-]+)'){$model=$1};
	        if($i =~ 'generate (.+)'){$interaction=$1};
	        if($i =~ 'add process (.+)' && $interaction == 'unknown'){$interaction=$1};
	    }
	    ($interaction, $junk)=split(/#/ , $interaction);
        $interaction =~ s/^\s+//g;  # clean from leading spaces
        $interaction =~ s/\s+$//g;  # clean from trailing spaces
    }else{
	    $name = 'proc_card.dat';
	    system("rm -f $fulldir/proc_card_mg5.dat");
	    open (INPUT, "$dirDATA/$uname/$name");
	    @input=<INPUT>;
	    close(INPUT);
	    $model='none';
	    $interaction='unknown';
	    $found=0;
	    $foundproc=0;
	    foreach $i (@input){
	        if($found==1){$model = $i;$found=0};
	        if($foundproc==1 && $i =~ '>'){$interaction = $i};
	        if($foundproc==1 && $i =~ /end_coup/i){$foundproc=0};
	        if($i =~ '# Begin MODEL'){$found=1};
	        if($i =~ '# Begin PROCESS'){$foundproc=1};
	    }
	    chomp($model);
	    $model =~ s/\s+//g;  # clean from spaces
	    ($interaction, $junk) = split(/#/ , $interaction);
	    $model = $model."_v4";
    }
}
# move to right directory
system("mv -f $dirDATA/$uname/$name $fulldir/$name");
#------------------------------------------------------------
# prepare the model form
#------------------------------------------------------------
if ($model =~ /\s*(.+)_v4$/ ){
    $modelcalc="$ENV{'MADGRAPH_BASE'}/MG_ME/Models/$1/".$1."_calc.html";
} else {
    $modelcalc="$ENV{'MADGRAPH_BASE'}/MG_ME/WebBin/".$model."_calc.html";   
}
if ( -e $modelcalc ){
    system ("cp $modelcalc $dirDATA/$process/HTML/model_calc.html");
    system("cd $fulldir; sed -e s/my_server_here/$server/g HTML/model_calc.html > HTML/test.html");
    system("cd $fulldir; sed -e s!proc_name_here!$procname!g HTML/test.html > HTML/model_calc.html");
}
#------------------------------------------------------------------------------------------
#   Check if the very same thing has been already generated 
#------------------------------------------------------------------------------------------
$exists=0;
$curr_id=$temp_id;
$void_dir=0;
$void_max=20;
$temp_id=0;
$log_text="identical log:";
$proc_file="$dirDATA/$uname/PROC$curr_id/$name";
$log_text.="<br>param_card: $proc_file";
while (($void_dir < $void_max) && ($exists == 0)){
    if ($temp_id == $curr_id){$temp_id++; next;}
    $log_text.="<br> loop for id: $temp_id";
    if (-e "$dirDATA/$uname/PROC$temp_id/Cards/$name"){
	$log_text.="<br>found one";
	$void_dir = 0;
    }else{
	$log_text.="<br>not exist";
	$temp_id++;
	$void_dir++;
	next;
    }
    if($temp_id eq $curr_id){
	$text.="<br>current one";
	$temp_id++;
	next;
    }
    $log_text.="<br>make comparaison";
    $proc_file2="$dirDATA/$uname/PROC$temp_id/Cards/$name";
    system ("diff -b $proc_file $proc_file2 > $dirDATA/$uname/diff.txt");
    open (F1, "$dirDATA/$uname/diff.txt");
    @f1 = <F1>;
    close(F1) ; 
    $exists=1;
    $log_text="";
    foreach $line(@f1) {
	$log_text.=$line."<br>";
	if ($line =~ /^\d+(,\d+)*[acd]\d+(,\d+)*$/ || $line =~ /^[<>]\s*\#/ || $line =~ /^[<>]\s+$/){}
	else {
	    $exists=0;
	}
    }
    $temp_id++;
}
$temp_id=$temp_id-1;
if($exists == 1){
#------------------------------------------------------------------------------------------
#   If already generated redirect there 
#------------------------------------------------------------------------------------------
    $fulldir="$dirDATA/$uname/PROC$temp_id";
    $| = 1; 
    print "Content-type: text/html\n\n";
    print  "<HTML> <HEAD>\n";
    print  "<META HTTP-EQUIV=\"Refresh\" CONTENT=\"5\; ";
    print "URL=http://$server/$dirHTML/$uname/PROC$temp_id/index.html\"></HEAD><BODY> \n";
    print "<center><H3> Process already generated by user: $uname redirecting browser to the corresponding web page: </H3>";
    print "<a href=\"http://$server/$dirHTML/$uname/PROC$temp_id/index.html\"> http://$server/$dirHTML/$uname/PROC$temp_id/index.html</a> \n";
#         print "$log_text";
    print "</center></BODY></HTML>";
    system ("rm -rf $dirDATA/$uname/PROC$curr_id");	     
}
else{
#--------------------------------------------------------------------
#  Write out an html page while waiting to process with redirect link
#--------------------------------------------------------------------
#
#   Flush outputs immediately
#
    $| = 1; 
    print "Content-type: text/html\n\n";
    print  "<HTML> <HEAD> \n";
    print "<META HTTP-EQUIV=\"Refresh\" CONTENT=\"5\; ";
    print "URL=http://$server/$dirHTML/$process/index.html\"> \n";
#    print "$log_text";
    print "\n <TITLE>MadGraph5 Working</TITLE></HEAD> \n <BODY>";

    
    print "<p><H1> Working on process <b> $interaction </b> </H1> \n";

    print "<P>The results will be placed at the following link ";
    print "<A HREF=\"http://$server/$dirHTML/$process\/index.html\"> ";
    print "http://$server/$dirHTML/$process\/index.html </A> <P> ";
    print "<P> <H2> The browser has been asked to check this link in 10 seconds. </H2><P> \n";
    print "</BODY></HTML> \n \n";

#
#   Write out info on when process was created tjs July 1 2011
#
    system(" cd $dirDATA/$process/; date > CREATED ");
#-----------------------------------------------------------
#  Now run the process
#-----------------------------------------------------------
    
    if($ENV{'MADGRAPH_FSQUEUE'}){
	    open(PAGE,"> $dirDATA/$process/create_process.sh");
	    print PAGE "#!/bin/bash\n";
	    print PAGE "cd  $dirDATA/$process/;\n";
        print PAGE "source $ENV{'MADGRAPH_BASE'}/MG_ME/WebBin/python.sh;\n";
	    if ($name eq 'proc_card_mg5.dat' ){
	        print PAGE "$mg5_prog ./Cards/$name;\n";
	    }else{
	        print PAGE "echo \"import proc_v4 .\" | $mg5_prog  \n";
	    }
	    close(PAGE);
	    system("qsub -q $ENV{'MADGRAPH_FSQUEUE'} -e $dirDATA/$process/newprocess.err -o $dirDATA/$process/proc_log.txt -V $dirDATA/$process/create_process.sh   > /dev/null");
    } else {

	    if ($name eq 'proc_card_mg5.dat' ){
	        system ("cd $dirDATA/$process/; source $ENV{'MADGRAPH_BASE'}/MG_ME/WebBin/python.sh;  $mg5_prog ./Cards/$name \>& $dirDATA/$process/proc_log.txt &");
	    } else {
	        system ("cd $dirDATA/$process/; source $ENV{'MADGRAPH_BASE'}/MG_ME/WebBin/python.sh; echo \"import proc_v4 .\" | $mg5_prog \>& $dirDATA/$process/proc_log.txt &");
	    }
    }

    if($callfrom eq 'upload_banner'){
    	system("rm $dirDATA/$uname/banner.txt");
    }

}

system ("rm -f $dirDATA/$uname/diff.txt");
# Place all uploaded files in the right directory
if ( $callfrom eq 'upload_banner' ){
    for $file ("param_card.dat", "run_card.dat", "pythia_card.dat", "pgs_card.dat", "delphes_card.dat", "delphes_trigger.dat") {
	system("mv -f $dirDATA/$uname/$file $fulldir/Cards/$file");
    }
}
&WriteToLog($interaction, $model);
	
	

#
#   That's all folks!
#
close(STDOUT);
close(STDERR);
close(STDIN);


#----------------------------------------------------------------
#  FUNCTIONS: 
#----------------------------------------------------------------

sub PrintError{
    #---------------------------------------------------------------
    # print an error message
    #---------------------------------------------------------------

    my($error)= @_ ;
    print "Content-type: text/html\n\n";
    print  "<HTML><BODY>\n";
    print "<center><H3> Error: $error. Please click the BACK button in your browser to correct the problem. </H3>";
    print "</center></BODY></HTML>";
    exit;
}

sub WriteCmdCard{
    #---------------------------------------------------------------
    # creates the proc_card.dat 
    #---------------------------------------------------------------

    my($interaction, $model, $nf, $nl, $process, $output)= @_ ;

    open (CmdCard, "> $dirDATA/$uname/proc_card_mg5.dat") || PrintError("Error creating file $dirDATA/$uname/proc_card_mg5.dat"); 
    
    # Import the model
    if ((index $model, '_v4') > 0 ){
	$v4model = substr $model, 0, (index $model, '_v4');
	print CmdCard "import model_v4 $v4model \n";
    }
    else{
	print CmdCard "import model $model \n"
	}
    
    # Define the multiparticle label
    print CmdCard "$nf \n";
    print CmdCard "$nl \n";

    # Generate the process
    print CmdCard "generate $interaction\n";
#    if ( $interaction_1 ne '' ){
#	print CmdCard "add process $interaction_1\n";
#    }
#    if ( $interaction_2 ne '' ){
#	print CmdCard "add process $interaction_2\n";
#    }
#    if ( $interaction_3 ne '' ){
#	print CmdCard "add process $interaction_3\n";
#    }
#    if ( $interaction_4 ne '' ){
#	print CmdCard "add process $interaction_4\n";
#    }


    # Generate the output
    print CmdCard "output $output -f\n";

    close(CmdCard);

}#end sub WriteInputDat

sub WriteToLog {
    #---------------------------------------------------------------
    # this creates a log file and appends any new submission to the
    # log file
    #
    # also record processes which were NOT successfully run
    #---------------------------------------------------------------

    my($interaction, $model)= @_ ;

    #---------------get information about the user------------------
    my $url = $ENV{REMOTE_HOST};
    my $uname = $ENV{REMOTE_USER};
    my $now_string = localtime;

    open (OUT,">> $dirLOG/MGrequest.log") || die "Could not open the log file"; 
    print OUT "Requested from by $uname \n";
    print OUT "Time requested: $now_string\n";
#  print OUT "Browser used: $browser \n";
    print OUT "Interaction : $interaction\n";
    if( $_[0]){
	print OUT "Process file in directory: \\htdocs\\$dirHTML\\$process \n"; 
    }#end if
	else{ 
	    print OUT "Process not successful \n"
	    }#end else

	    print OUT "\n";
    
    #close the file after writing the requested interaction
    close(OUT);

}# end of sub WriteToLog


#sub writeHtmlProcessPage {
##--------------------------------------------------------------- 
##
##---------------------------------------------------------------  
#my($interaction, $model, $qcdOrder, $qedOrder, $nf, $nl)= @_ ;
#
#   $htfile =  "index" . "\.html"; #name the file
##   $htfile =  $process . "\.html"; #name the file
##   print "Open file $dirMAD/$process/$htfile \n";
#   open(PAGE,"> $dirDATA/$process/$htfile");
#   print PAGE "\<HTML\> \n";
#   print PAGE "\<HEAD\> \n";
#   print PAGE "\<TITLE\>MadGraphII $interaction Subprocesses\<\/TITLE\> \n";
#   print PAGE "\<\/HEAD\> \n";
#   print PAGE "\<BODY\> \n";
#   print PAGE "\<H1 id=\"TOP\" \>MadGraph ll\<\/H1\> \n";
#   print PAGE "\<H2\>The requested interaction was:  $interaction <\/H2\> \n";
#   print PAGE "\<P\>QCD order:  $qcdOrder  \<BR\> \n";
#   print PAGE "QED order:  $qedOrder  \<BR\> \n";
#
#  print PAGE "<TABLE> \n <TR> <TD> \n";
#  print PAGE "<P>Quarks:<font color=blue> d u s c b t d~ u~ s~ c~ b~ t~ </font>\n";
#  print PAGE "<P>Leptons:<font color=blue> e- mu- ta- ve vm vt e+ mu+ ta+ ve~ vm~ vt~ </font>\n";
#  print PAGE "<P>Bosons:<font color=blue> A Z W+ W- h g </font>\n";
#  print PAGE "<P>Special:<font color=blue> P j </font> (sums over d u s c d~ u~ s~ c~ g)\n";
#  print PAGE "</TABLE>";
#
#  print PAGE "<FORM NAME=\"particle\" METHOD=\"POST\" ACTION=\"http://$server/cgi-bin/webnewprocess> \n"; 
#  print PAGE "<TABLE> \n <TR> <TD> \n";
#  print PAGE "<P>Process: \n <TD> \n";
#  print PAGE "<INPUT TYPE=\"text\" NAME=\"description\" VALUE=\"$interaction\"> \n";
#  print PAGE "<TD> \n ";
#  print PAGE "<INPUT TYPE=\"submit\" VALUE=\"Resubmit\">";
#
#  print PAGE "</TABLE> \n <TABLE> \n <TR> \n <TD> \n";
#  print PAGE "<P> QCD Order: \n <TD> \n";
#  print PAGE "<INPUT TYPE=\"text\" NAME=\"qcd\" VALUE=\"$qcdOrder\" SIZE=3> \n";
#  print PAGE "QED Order: \n <TD> \n";
#  print PAGE "<INPUT TYPE=\"text\" NAME=\"qed\" VALUE=\"$qedOrder\" SIZE=3> \n";
#
##  print PAGE "Process \n <TD> \n";
##
## This could be a security problem. Really need to check the procid which comes back 
##
#  print PAGE "<INPUT TYPE=\"hidden\" NAME=\"procid\" VALUE=\"$process\" SIZE=0> \n";
#
#  print PAGE "</TABLE> \n";
#
#  print PAGE "</FORM>";
#
##  if ($pages >0) {
#  if (-e "subproc.mg") {
#
#   print PAGE "\<H2\>Links to Madgraph Results \<\/H2/> \n";
##   print PAGE "<P>\<A HREF\=\"matrix.f\" onMouseOver=\"window\.status=\'Fortran code for this process\'\; return true\" onMouseOut=\"window.status=\'  \'\; return true\" >Fortran Code \<\/A\> \<BR\> \n";
##   print PAGE "<A HREF\=\"matrix.ps\" onMouseOver=\"window\.status=\'Postscript file of the diagrams\'\; return true\" onMouseOut=\"window.status=\'  \'\; return true\">Diagrams in Postscript format \<\/A\>\<BR\> \n";
#   print PAGE "<P><A HREF\=\"package\.tar\.gz\" onMouseOver=\"window\.status=\'A tar gzipped version of package which should run on a unix machine.\'\; return true\" onMouseOut=\"window.status=\'  \'\; return true\">package.tar.gz \<\/A\> A complete package which should run on your unix machine";
#   print PAGE "<H4>";
#   print PAGE " <P> 1) gunzip package.tar.gz \n";
#   print PAGE " <p> 2) tar -xvf package.tar \n";
#   print PAGE " <p> 3) ./goloop \<BR\> \<BR\> \n";
#   print PAGE "<\/H4>";
#
##   print PAGE "<P>\<A HREF\=\"results.html\"\> Results \<\/A\> \<BR\> \n";
#
#   print PAGE "<P>\<A HREF\=\"http://$server/madgraph.html\"\> New Process \<\/A\> \<BR\> \n";
#   print PAGE "\<H2\>Processes: \<\/H2/> \<BR\>\n";
#
#
#   #the links to subprocess
#
#   my($line);
#   $line= "Failed";
#   if (open FILE, "$dirMAD/$process/subproc.mg"){
#       while ($line = <FILE>){
#	   chomp $line;
#	   print PAGE "\<A HREF=\"$line/diagrams.html\" \> $line \<\/A\> \n";
#	   print PAGE "\<BR\>";
#       }
#       close FILE;
#   }
#
#
#
#   for($j=1;$j<$pages+1;$j++){
#       print PAGE "\<A HREF=\"\#$process$j\" onMouseOver=\"window\.status=\'Click to go to page $j of diagrams\'\; return true\" onMouseOut=\"window.status=\'  \'\; return true\" \>$j\<\/A\> \n";
#   }#end for
#
#   print PAGE "\<BR\> \n";
#
#   for($j=1;$j<$pages+1;$j++){
#       print PAGE "\<P>\<A NAME=\"$process$j\" \> \<B\>Page $j of $pages for $interaction \<\/B\> \<BR\> \n";
#       print PAGE "\<A HREF=\"\#TOP\" onMouseOver=\"window\.status=\'Back to top of page\'\; return true\" onMouseOut=\"window.status=\'  \'\; return true\"  \>back to top of page<\/A\> \<BR\> \n";
#       print PAGE "\<IMG SRC=\"$process$j.jpg\" ALT=\"Page $j of $pages for $interaction\" \> \<BR\> \n";
#   }#end of for
#   }  #endif process worked, print error if it didn't work
#  else{
#      if (-e "$dirMAD/$process/P*_*") {
#	  print PAGE "It Worked";
#	  }
#      else {
#	  print PAGE "<H1> No diagrams generated. <\/H1>";
#	  print PAGE "Recheck the process and maximum orders.";
#	  print PAGE "\<P>\<A HREF\=\"log.txt\"\> Log File \<\/A\>";
#      }
#  }
#   print PAGE "\<\/BODY\> \n";
#   print PAGE "\<\/HTML\> \n";
#   close(PAGE);
#
#}#end sub writeHtmlProcessPage




