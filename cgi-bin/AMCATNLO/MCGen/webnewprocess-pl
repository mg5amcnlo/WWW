#!/usr/bin/perl -w
#------------------------NOTES-------------------------------
#
# URL REFERENCES:
# when putting in url references listing a file without
# anything in front, like
#   file
# will look for the file in the local directory
#
# giving the reference as
#  /file
# will look in the server/htdocs folder
#
#------------------------------------------------------------
#
#          This is Denny's code for unwrapping the form replies
#
    my($zzi,@marked,$qn,$an);
    binmode STDIN;
    read STDIN,$zzi,$ENV{CONTENT_LENGTH};
    $zzi =~ s/\s$//g;
    @marked = split(/&/,$zzi);
    foreach $input (@marked) {
        ($qn,$an) = split(/=/,$input);
        $an =~ tr/+/ /;
        $an =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
        $an =~ s/~!/ ~!/g;
        $in{$qn} = $an
        }


#------------------------------------------------------------
# set variables for the most common path names
#------------------------------------------------------------

$dirDATA = "/nfs/madgraph/AMCATNLO";
$dirTMPLT = "/nfs/madgraph/AMCATNLO/AMCATNLO/Templates";
$dirLOG = $ENV{'MADGRAPH_DATA'};
$dirHTML = "MadGraphData";
$bin = "$ENV{'MADGRAPH_BASE'}/MG_ME/WebBin";
$server = $ENV{'SERVER_NAME'};
$loop = "$bin/newprocess --web";

#------------------------------------------
# The process informations are given by the form
#------------------------------------------

$process = $in{process};
$coll_id = $in{collider};
$nevts = $in{nevts};
&check($nevts);

if ($coll_id eq "LHC7"){
   $energy = "3500";
   $collider = "1";
   $coll_string = "p p";}
elsif ($coll_id eq "LHC14"){
   $energy = "7000";
   $collider = "1";
   $coll_string = "p p";}
elsif ($coll_id eq "TEV"){
   $energy = "980";
   $collider = "-1";
   $coll_string = "p pbar";}

if ($process eq "w"){
  $proc_string = "W > e ve";
} # else...

#------------------------------------------
# Find a free directory in the private area
#------------------------------------------

# first check private dir exists and if not create it

  $uname = $ENV{REMOTE_USER};
  if(! -e "$dirDATA/$uname" ){ 
  system("mkdir $dirDATA/$uname");
  system("touch $dirDATA/$uname/index.html")};


      $procname = "$process";#\_$temp_id";
      $procdir = "$uname/$procname";
      $fulldir = "$dirDATA/$procdir";


# If no dirname is given or it already exists then use a generic PROC#
##       system("rm -r  $fulldir");
#       system("rm -r $dirDATA/$uname/w-db-");

#if (! -e "$fulldir"){ 
    system("cp -RP $dirTMPLT/$process $dirDATA/$uname/.");
####system("cp $dirTMPLT/$process.tar.gz $dirDATA/$uname/.");
####system("cd $dirDATA/$uname/; tar -xvf $process.tar.gz > $dirDATA/$uname/untar.log");
#}

#  then create the directory for the output files (res_*.txt and event file)
$temp_id = 0;
$dbdir = "$process-db-$temp_id";
while ( -e "$dirDATA/$uname/$dbdir"){
	$temp_id +=1;
$dbdir = "$process-db-$temp_id";
}

$DBdir = "$dirDATA/$uname/$dbdir";
system("mkdir $DBdir");
#create info files....
system("echo $nevts > $DBdir/n_events.dat");
system("echo $coll_id > $DBdir/coll_id.dat");
system("echo $dbdir > $DBdir/dirname.dat");
system("echo \"$coll_string > $proc_string\" > $DBdir/process.dat");



#------------------------------------------------------------
# prepare the directory, edit run/param card and the header of index.html
#------------------------------------------------------------
    
    &write_run_card($fulldir, $process, $collider, $energy);
      system("sed -i.bak \"s/ACOLL/$coll_string/g \" $fulldir/index.html");
      system("cp $fulldir/index.html $DBdir/index.html"); 

      system("cd $fulldir; /bin/bash bin/run_all.sh none $nevts 1 0 $uname $dbdir $DBdir > $fulldir/logrun.txt 2>&1 &");

#    system("rm -rf `find $dirDATA/$process -name CVS -type d`");
#    system("cd $fulldir; sed -e s/my_server_here/$server/g HTML/web_run_form.html > HTML/test.html");
#    system("cd $fulldir; sed -e s!dir_name_here!$fulldir!g HTML/test.html > HTML/web_run_form.html");     
            
#------------------------------------------------------------
# Print a page
#------------------------------------------------------------

         print "Content-type: text/html\n\n";
         print  "<HTML> <HEAD>\n";
	 print "<meta http-equiv=\"REFRESH\" content=\"10;url=http:\/\/$server\/AMCATNLO\/AMCATNLOdata\/$uname\/$dbdir\/index.html\"> ";
	 print "</HEAD>";
	 print "<BODY>";
         print "<font  color=\"#AA0000\" face=\"Courier\"><br><br>
		Job submitted! <br><br><hr></font>
		<font color=\"#000000\" face=\"Courier\"><p style=\"line-height:150%;\">";
         print "Thank you for submitting your job. An email will be sent to $uname when the job is completed.<br>";
         print "You will be soon redirected to the process status page. <br><br>";
	 print "Click <a href=\"http://amcatnlo.web.cern.ch/amcatnlo/mainframe.htm\">here</a> to go back to the aMC\@NLO web page.";

	 print "</BODY>";
	

sub write_run_card
{ my($fulldir, $process, $collider, $energy)= @_;

$runcont=<<RUNCARDEND;
#*********************************************************************
#                  aMC\@NLO - MadGraph/MadEvent                       *
#                  http://madgraph.hep.uiuc.edu                      *
#                                                                    *
#                        run_card.dat                                *
#                                                                    *
#  This file is used to set the parameters of the run.               *
#                                                                    *
#  Some notation/conventions:                                        *
#                                                                    *
#   Lines starting with a '# ' are info or comments                  *
#                                                                    *
#   mind the format:   value    = variable     ! comment             *
#*********************************************************************
#
#*******************                                                 
# Running parameters
#*******************                                                 
#                                                                    
#*********************************************************************
# Tag name for the run (one word)                                    *
#*********************************************************************
  'fermi'     = run_tag ! name of the run 
#*********************************************************************
# Run to generate the grid pack                                      *
#*********************************************************************
  .false.     = gridpack  !True = setting up the grid pack
#*********************************************************************
# Number of events and rnd seed                                      *
#*********************************************************************
  10000       = nevents ! Number of unweighted events requested 
      0       = iseed   ! rnd seed (0=assigned automatically=default))
#*********************************************************************
# Collider type and energy                                           *
#*********************************************************************
        1     = lpp1  ! beam 1 type (0=NO PDF)
        $collider     = lpp2  ! beam 2 type (0=NO PDF)
#      45.594     = ebeam1  ! beam 1 energy in GeV
#      45.594     = ebeam2  ! beam 2 energy in GeV
    $energy       = ebeam1  ! beam 1 energy in GeV
    $energy       = ebeam2  ! beam 2 energy in GeV
#*********************************************************************
# Beam polarization from -100 (left-handed) to 100 (right-handed)    *
#*********************************************************************
        0     = polbeam1 ! beam polarization for beam 1
        0     = polbeam2 ! beam polarization for beam 2
#*********************************************************************
# PDF CHOICE: this automatically fixes also alpha_s and its evol.    *
#*********************************************************************
 'cteq6_m'    = pdlabel     ! PDF set                                     
  10042      = lhaid
#*********************************************************************
# Renormalization and factorization scales                           *
#*********************************************************************
 T        = fixed_ren_scale  ! if .true. use fixed ren scale
 T        = fixed_fac_scale  ! if .true. use fixed fac scale
 91.188  = scale            ! fixed ren scale
 91.188  = dsqrt_q2fact1    ! fixed fact scale for pdf1
 91.188  = dsqrt_q2fact2    ! fixed fact scale for pdf2
 1        = scalefact        ! scale factor for event-by-event scales
 1        = ellissextonfact  ! Ellis-Sexton fact for evt-by-evt scales
#*********************************************************************
# Matching - Warning! ickkw > 0 is still beta
#*********************************************************************
 0        = ickkw            ! 0 no matching, 1 MLM, 2 CKKW matching
#*********************************************************************
#                                                                    
#**********************************
# BW cutoff (M+/-bwcutoff*Gamma)
#**********************************
 15  = bwcutoff
#*******************                                                 
# Standard Cuts
#*******************                                                 
#                                                                    
#*********************************************************************
# Minimum and maximum pt's                                           *
#*********************************************************************
  1d-1  = ptj       ! minimum pt for the jets 
  0  = ptb       ! minimum pt for the b 
  0  = pta       ! minimum pt for the photons 
  0  = ptl       ! minimum pt for the charged leptons 
  0  = misset    ! minimum missing Et (sum of neutrino's momenta)
  0  = ptheavy   ! minimum pt for one heavy final state
 1d5 = ptjmax    ! maximum pt for the jets
 1d5 = ptbmax    ! maximum pt for the b
 1d5 = ptamax    ! maximum pt for the photons
 1d5 = ptlmax    ! maximum pt for the charged leptons
 1d5 = missetmax ! maximum missing Et (sum of neutrino's momenta)
#*********************************************************************
# Minimum and maximum E's (in the lab frame)                         *
#*********************************************************************
  0  = ej     ! minimum E for the jets 
  0  = eb     ! minimum E for the b 
  0  = ea     ! minimum E for the photons 
  0  = el     ! minimum E for the charged leptons 
 1d5  = ejmax ! maximum E for the jets
 1d5  = ebmax ! maximum E for the b
 1d5  = eamax ! maximum E for the photons
 1d5  = elmax ! maximum E for the charged leptons
#*********************************************************************
# Maximum and minimum rapidity                                       *
#*********************************************************************
 1d2  = etaj    ! max rap for the jets 
 1d2  = etab    ! max rap for the b 
 1d2  = etaa    ! max rap for the photons 
 1d2  = etal    ! max rap for the charged leptons 
 0d0  = etajmin ! min rap for the jets
 0d0  = etabmin ! min rap for the b
 0d0  = etaamin ! min rap for the photons
 0d0  = etalmin ! main rap for the charged leptons
#*********************************************************************
# Minimum and maximum DeltaR distance                                *
#*********************************************************************
 0   = drjj    ! min distance between jets 
 0   = drbb    ! min distance between b's 
 0   = drll    ! min distance between leptons 
 0   = draa    ! min distance between gammas 
 0   = drbj    ! min distance between b and jet 
 0   = draj    ! min distance between gamma and jet 
 0   = drjl    ! min distance between jet and lepton 
 0   = drab    ! min distance between gamma and b 
 0   = drbl    ! min distance between b and lepton 
 0   = dral    ! min distance between gamma and lepton 
 1d2 = drjjmax ! max distance between jets
 1d2 = drbbmax ! max distance between b's
 1d2 = drllmax ! max distance between leptons
 1d2 = draamax ! max distance between gammas
 1d2 = drbjmax ! max distance between b and jet
 1d2 = drajmax ! max distance between gamma and jet
 1d2 = drjlmax ! max distance between jet and lepton
 1d2 = drabmax ! max distance between gamma and b
 1d2 = drblmax ! max distance between b and lepton
 1d2 = dralmax ! maxdistance between gamma and lepton
#*********************************************************************
# Minimum and maximum invariant mass for pairs                       *
#*********************************************************************
 0   = mmjj    ! min invariant mass of a jet pair 
 0   = mmbb    ! min invariant mass of a b pair 
 0   = mmaa    ! min invariant mass of gamma gamma pair
 0   = mmll    ! min invariant mass of l+l- (same flavour) lepton pair
 1d5 = mmjjmax ! max invariant mass of a jet pair
 1d5 = mmbbmax ! max invariant mass of a b pair
 1d5 = mmaamax ! max invariant mass of gamma gamma pair
 1d5 = mmllmax ! max invariant mass of l+l- (same flavour) lepton pair
#*********************************************************************
# Minimum and maximum invariant mass for all letpons                 *
#*********************************************************************
 0   = mmnl    ! min invariant mass for all letpons (l+- and vl) 
 1d5 = mmnlmax ! max invariant mass for all letpons (l+- and vl) 
#*********************************************************************
# Inclusive cuts                                                     *
#*********************************************************************
 0  = xptj ! minimum pt for at least one jet  
 0  = xptb ! minimum pt for at least one b 
 0  = xpta ! minimum pt for at least one photon 
 0  = xptl ! minimum pt for at least one charged lepton 
#*********************************************************************
# Control the pt's of the jets sorted by pt                          *
#*********************************************************************
 0   = ptj1min ! minimum pt for the leading jet in pt
 0   = ptj2min ! minimum pt for the second jet in pt
 0   = ptj3min ! minimum pt for the third jet in pt
 0   = ptj4min ! minimum pt for the fourth jet in pt
 1d5 = ptj1max ! maximum pt for the leading jet in pt 
 1d5 = ptj2max ! maximum pt for the second jet in pt
 1d5 = ptj3max ! maximum pt for the third jet in pt
 1d5 = ptj4max ! maximum pt for the fourth jet in pt
 0   = cutuse  ! reject event if fails any (0) / all (1) jet pt cuts
#*********************************************************************
# Control the Ht(k)=Sum of k leading jets                            *
#*********************************************************************
 0   = htjmin ! minimum jet HT=Sum(jet pt)
 1d5 = htjmax ! maximum jet HT=Sum(jet pt)
 0   = ht2min ! minimum Ht for the two leading jets
 0   = ht3min ! minimum Ht for the three leading jets
 0   = ht4min ! minimum Ht for the four leading jets
 1d5 = ht2max ! maximum Ht for the two leading jets
 1d5 = ht3max ! maximum Ht for the three leading jets
 1d5 = ht4max ! maximum Ht for the four leading jets
#*********************************************************************
# WBF cuts                                                           *
#*********************************************************************
 0   = xetamin ! minimum rapidity for two jets in the WBF case  
 0   = deltaeta ! minimum rapidity for two jets in the WBF case 
#*********************************************************************
# maximal pdg code for quark to be considered as a jet               *
# otherwise b cuts are applied                                       *
#*********************************************************************
 5 = maxjetflavor
#*********************************************************************
# Jet measure cuts                                                   *
#*********************************************************************
 0   = xqcut   ! minimum kt jet measure between partons
#*********************************************************************

RUNCARDEND
open(RUNC, ">$fulldir/Cards/run_card.dat");
print RUNC $runcont;
close(RUNC);
}


sub looks_like_integer { shift =~ /^-?\d+$/ }

sub check{
#---check if a variable is a number
my($var)=@_;
$bad =0;
if (! looks_like_integer($var)) {
$bad = 2;
}
 
if ($bad eq 0){
if (($var < 0) || ($var > 1000000)){
$bad =1;
}
}
if ($bad ne 0){
print "Content-type: text/html\n\n";
print  "<HTML> <BODY>\n";
print" <title> Wrong Arguments </title>";
print "<font  color=\"#AA0000\" face=\"Courier\"><br><br> ";
print "Incorrect Number of events:<br> <br> <hr> </font>";
print "      <font  color=\"#000000\" face=\"Courier\"><p style=\"line-height:150%;\"><p>";
print"The number of events you entered is not an integer number between 1 and 1000000. $bad<br><br>\n";
print"Please go back to the <a href=\"$server\/AMCATNLO\/restricted\/html\/new_gen_proc_card.html\">Online MC Generation page</a> and re-submit the job.";
         print "</center></BODY></HTML>";
exit;
}
}
